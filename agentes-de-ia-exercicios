%pip -q install google-genai google-adk

import os
from google.colab import userdata
from google import genai
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types
from datetime import date
import textwrap
from IPython.display import HTML, Markdown
import requests
import warnings
import time
import random

warnings.filterwarnings("ignore")

# Configura√ß√£o da API Key (SUBSTITUA PELA SUA API KEY EM: 'GOOGLE_SUA_API_KEY'
try:
    os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_SUA_API_KEY')
except KeyError:
    print("Erro: A vari√°vel de ambiente GOOGLE_API_KEY n√£o est√° configurada no Colab Userdata.")
    print("Por favor, configure a chave da API e tente novamente.")
    exit()

# Configura√ß√£o do cliente Gemini
try:
    client = genai.Client()
except Exception as e:
    print(f"Erro ao inicializar o cliente Gemini: {e}")
    exit()

MODEL_ID = "gemini-2.0-flash" # Usando um modelo com camada gratuita

# Fun√ß√µes auxiliares (mantemos as mesmas)

def call_agent(agent: Agent, message_text: str) -> str:
    """Envia uma mensagem para um agente e retorna a resposta final."""
    session_service = InMemorySessionService()
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    try:
        for event in runner.run(user_id="user1", session_id="session1", new_message=content):
            if event.is_final_response():
                for part in event.content.parts:
                    if part.text is not None:
                        final_response += part.text
                        final_response += "\n"
    except Exception as e:
        print(f"Erro durante a execu√ß√£o do agente {agent.name}: {e}")
        return "Ocorreu um erro ao executar o agente. Por favor, tente novamente mais tarde."
    return final_response


def call_agent_with_retry(agent: Agent, message_text: str, max_retries=3):
    """Envia uma mensagem para um agente com retry."""
    for i in range(max_retries):
        try:
            return call_agent(agent, message_text)
        except google.genai.errors.ClientError as e:
            if e.status_code == 429:  # RESOURCE_EXHAUSTED
                wait_time = (2 ** i) + random.random()  # Backoff exponencial com jitter
                print(f"Cota excedida. Tentando novamente em {wait_time:.2f} segundos...")
                time.sleep(wait_time)
            else:
                raise  # Re-levanta outras exce√ß√µes
    return "Erro: Cota excedida ap√≥s v√°rias tentativas."  # Ou lance uma exce√ß√£o aqui

def to_markdown(text):
    """Formata texto para Markdown no Colab."""
    text = text.replace('‚Ä¢', '  *')
    return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

def executar_busca_google(query: str) -> str:
    """Executa uma busca no Google e retorna os resultados."""
    try:
        response = client.models.generate_content(
            model=MODEL_ID,
            contents=query,
            config={"tools": [{"google_search": {}}]}
        )

        if response.candidates and response.candidates[0].grounding_metadata:
            search_queries = response.candidates[0].grounding_metadata.web_search_queries
            sites = response.candidates[0].grounding_metadata.grounding_chunks
            rendered_content = response.candidates[0].grounding_metadata.search_entry_point.rendered_content

            print(f"Busca realizada: {search_queries}")
            print(f"P√°ginas utilizadas na resposta: {', '.join([site.web.title for site in sites])}")
            display(HTML(rendered_content))
            return response.text
        else:
            return "Nenhum resultado encontrado na busca."

    except Exception as e:
        print(f"Erro ao realizar a busca no Google: {e}")
        return "Ocorreu um erro ao realizar a busca. Por favor, tente novamente."

# Novos Agentes

def agente_explicador(topico):
    """Agente que busca uma explica√ß√£o resumida e clara para um t√≥pico."""
    instruction = f"""
        Voc√™ √© um especialista em fornecer explica√ß√µes claras e concisas sobre diversos t√≥picos.
        Sua tarefa √© usar a ferramenta de busca do Google (google_search) para encontrar uma explica√ß√£o resumida e em linguagem clara sobre o seguinte t√≥pico: {topico}.
        Foque em encontrar explica√ß√µes introdut√≥rias e f√°ceis de entender, ideal para quem est√° come√ßando a aprender sobre o assunto.
        A explica√ß√£o deve ter no m√°ximo 3 par√°grafos.
        """
    explicador = Agent(
        name="agente_explicador",
        model="gemini-2.0-flash",
        instruction=instruction,
        description="Agente que busca explica√ß√µes claras e resumidas no Google",
        tools=[google_search]
    )
    entrada_do_agente_explicador = f"Explique de forma resumida e clara o t√≥pico: {topico}"
    explicacao_encontrada = call_agent_with_retry(explicador, entrada_do_agente_explicador)
    return explicacao_encontrada

def agente_exercicios(topico, data_de_hoje):
    """Agente que busca exerc√≠cios simples para praticar um t√≥pico."""
    instruction = f"""
        Voc√™ √© um especialista em encontrar exerc√≠cios pr√°ticos para auxiliar no aprendizado de um determinado t√≥pico.
        Sua tarefa √© usar a ferramenta de busca do Google (google_search) para encontrar exerc√≠cios simples e de n√≠vel iniciante sobre o seguinte t√≥pico: {topico}.
        Busque por no m√°ximo 3 a 5 exerc√≠cios com diferentes formatos (por exemplo, m√∫ltipla escolha, verdadeiro ou falso, lacunas para preencher).
        Priorize exerc√≠cios que sejam recentes (√∫ltimos 6 meses) e que pare√ßam ter uma boa relev√¢ncia para iniciantes.
        Inclua as perguntas dos exerc√≠cios e, se poss√≠vel, indique onde encontrar as respostas ou um gabarito.
        Data de hoje: {data_de_hoje}
        """
    buscador_exercicios = Agent(
        name="agente_exercicios",
        model="gemini-2.0-flash",
        instruction=instruction,
        description="Agente que busca exerc√≠cios simples para praticar um t√≥pico no Google",
        tools=[google_search]
    )
    entrada_do_agente_exercicios = f"Encontre exerc√≠cios simples para praticar o t√≥pico: {topico}"
    exercicios_encontrados = call_agent_with_retry(buscador_exercicios, entrada_do_agente_exercicios)
    return exercicios_encontrados

def agente_integrador(topico, explicacao, exercicios):
    """Agente que junta as informa√ß√µes da explica√ß√£o e dos exerc√≠cios."""
    instruction = f"""
        Voc√™ √© um integrador de informa√ß√µes. Sua tarefa √© organizar a explica√ß√£o fornecida sobre o t√≥pico "{topico}" e a lista de exerc√≠cios encontrados.
        Apresente primeiro a explica√ß√£o de forma clara e concisa. Em seguida, liste os exerc√≠cios encontrados para praticar o t√≥pico.
        Organize os exerc√≠cios de forma que fiquem f√°ceis de identificar e resolver. Se poss√≠vel, inclua alguma dica ou observa√ß√£o sobre como resolver os exerc√≠cios.
        O objetivo final √© fornecer um material completo e √∫til para algu√©m que deseja aprender e praticar sobre o t√≥pico.
        """
    integrador = Agent(
        name="agente_integrador",
        model="gemini-2.0-flash",
        instruction=instruction,
        description="Agente que integra a explica√ß√£o e os exerc√≠cios encontrados",
        tools=[] # Este agente n√£o precisa de ferramentas externas
    )
    entrada_do_agente_integrador = f"T√≥pico: {topico}\n\nExplica√ß√£o: {explicacao}\n\nExerc√≠cios: {exercicios}"
    resultado_final = call_agent_with_retry(integrador, entrada_do_agente_integrador)
    return resultado_final

# Fluxo principal com os novos agentes

data_de_hoje = date.today().strftime("%d/%m/%Y")

print("Iniciando a busca de informa√ß√µes para aprendizado...")

topico = input("Por favor, digite o assunto que voc√™ quer aprender: ")

if not topico:
    print("Sem t√≥pico n√£o h√° pesquisa!")
else:
    print(f"Oba! Vamos aprender sobre: {topico}")

    # Buscar explica√ß√£o
    explicacao = agente_explicador(topico)
    print("\n--- üí° Explica√ß√£o do T√≥pico ---\n")
    display(to_markdown(explicacao))
    print("------------------------------------")

    # Buscar exerc√≠cios
    exercicios = agente_exercicios(topico, data_de_hoje)
    print("\n--- ‚úçÔ∏è Exerc√≠cios para Praticar ---\n")
    display(to_markdown(exercicios))
    print("------------------------------------")

    # Integrar as informa√ß√µes
    resultado_integrado = agente_integrador(topico, explicacao, exercicios)
    print("\n--- üìö Resumo e Exerc√≠cios Integrados ---\n")
    display(to_markdown(resultado_integrado))
    print("------------------------------------------")
